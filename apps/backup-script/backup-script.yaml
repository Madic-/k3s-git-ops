# Explanation to this ConfigMap: https://madic-.github.io/k3s-git-ops/backup/
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: crontab-backup-script
  namespace: longhorn
  annotations:
    reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
    #reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "certmanager" # Control destination namespaces
    # Auto create reflection for matching namespaces
    reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
    #reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "dev,staging,prod" # Control auto-reflection namespaces
data:
  backup.sh: |
    #!/bin/sh

    # Variable for NTFS notification
    NTFY_TITLE="$(hostname | cut -d '-' -f1) - Backup failed"

    # Variables for Prometheus metrics
    JOB_START_TIME=$(date +%s)
    JOB_STATUS="success"

    # Function to send notification on failure
    notify_failure_ntfy() {
    curl -s ${NTFY_CREDS} \
        -H "Title: ${NTFY_TITLE}" \
        -H "Priority: ${NTFY_PRIO}" \
        -H "Tags: ${NTFY_TAG}" \
        -d "$(cat /tmp/backup.log)
        $(date) Script exited with exit code ${1}." \
        "${NTFY_SERVER}"/"${NTFY_TOPIC}" >/dev/null
    }

    # Function to send metrics to Prometheus Pushgateway
    send_metrics_prometheus() {
        local job_duration=$(( $(date +%s) - JOB_START_TIME ))
        
        # Construct the text data for the metrics
        metrics="backup_duration_seconds ${job_duration}
    backup_start_timestamp ${JOB_START_TIME}
    backup_status{status=\"${JOB_STATUS}\"} 1"

        # Send the metrics to the Pushgateway
        echo "$metrics" | curl -s --data-binary @- "${PUSHGATEWAY_URL}/metrics/job/backup/instance/$(hostname | cut -d '-' -f1)"
    }

    # Redirect all output to a temporary log file and stdout
    exec > >(tee /tmp/backup.log) 2>&1

    # Set a trap for ERR to notify of any failures via ntfy
    if [ "${NTFY_ENABLED}" = "true" ]; then
      trap 'notify_failure_ntfy "$?"' ERR
    fi

    # Install curl if it is not already installed
    if ! command -v curl > /dev/null 2>&1; then
      echo "$(date) curl not found. Installing curl."
      apk add --no-cache curl
    fi

    # Log start of backup
    echo "$(date) Backup process started"

    # Check if a Restic repository exists and initialize it if not
    if ! restic snapshots > /dev/null 2>&1; then
      echo "$(date) Restic repository not found. Initializing a new repository."
      restic init
      if [ $? -ne 0 ]; then
        echo "$(date) Failed to initialize Restic repository. Exiting."
        send_metrics_prometheus
        exit 1
      fi
    fi

    # Create a snapshot with Restic
    restic backup --host $(hostname | cut -d '-' -f1) "${RESTIC_SOURCE}"

    # Remove older backups
    restic forget --host $(hostname | cut -d '-' -f1) --keep-hourly ${KEEP_HOURLY} --keep-daily ${KEEP_DAILY} --keep-weekly ${KEEP_WEEKLY} --keep-last ${KEEP_LAST} --prune

    # Log end of backup
    echo "$(date) Backup process completed"

    # Send metrics to Prometheus Pushgateway if enabled
    if [ "${PUSHGATEWAY_ENABLED}" = "true" ]; then
      send_metrics_prometheus
    fi
